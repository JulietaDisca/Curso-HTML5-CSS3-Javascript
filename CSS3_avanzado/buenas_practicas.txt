Aquí tienes algunas buenas practicas en CSS junto con ejemplos simples:
1. Uso de Selectores Específicos:

    Evita selectores demasiados generales que afecten a más elementos de los necesarios.
    Prefiere clases sobre elementos para mayor reutilización y mantenimiento.

CSS

/*Malas prácticas*/
div{
    /*...*/
}

/*Buenas prácticas*/
.container{
    /*...*/
}

2. Evita Estilos en Etiquetas style del HTML:

    Coloca todos los estilos en un archivo CSS externo para una mejor organización y mantenimiento. 

HTML

<!-- Malas prácticas -->
<div style= "color: red; font-size: 16px;"> Texto </div>

<!--Buenas prácticas -->
<div class= "styled-text"> Texto </div>

CSS

.style-text {
    color: red;
    font-size: 16px;
}

3. Utilizar Prefijos para Navegadores (si es necesario):

    Asegurate de agregar prefijos para propiedades CSS que puedan necesitarlos para la compatibilidad entre navegadores.

CSS 

/*Malas prácticas*/
.box {
    border-radius: 10px;
    -webkit-border-radius: 10px; /*Prefijo solo para Webkit*/
}

/*Buenas prácticas*/
.box{
    border-radius: 10px;
    -webkit-border-radius: 10px; 
    -moz-border-radius: 10px;
    -ms-border-radius: 10px;
}

4. Comentatios Claros y Concisos:   
    
    Documenta tu código para facilitar el mantenimiento y la colaboración.

CSS

/*Malas prácticas*/
/*Establecer color*/
.color{
    color: #333;
}

/*Buenas prácticas*/
/*Color del texto principal*/
.main-text{
    color: #333;
}

5.Usar Shorthand cuando sea Posible:

    Emplea propiedades Shorthand para reducir la redundancia y hacer  el código más conciso.

CSS

/*Malas prácticas*/
padding-top: 10px;
padding-right: 20px;
padding-bottom: 10px;
padding-left: 20px;


/*Buenas prácticas*/
padding: 10px 20px;

6.Responsive Design:

    Diseña para diferentes tamaños de pantalla utilizando media queries.

CSS

/*Malas prácticas*/
.container{
    width: 960px;
}

/*Buenas prácticas*/
.container{
    max-width: 100%
}

@media (min-width: 768px) {
    .container{
        width: 750px;
    }
}

@media (min-width: 992px){
    .container{
        width: 970px;
    }
}

7. Evitar !important:

    Minimiza el uso de !important para evitar problemas de especificidad.

    CSS 

/*Malas prácticas*/
.title{
    color: red !important;
}

/*Buenas prácticas*/
.title{
    color: red;
}

8.Uso de variables:

    Usa variables para almacenar valores que se utilizan repetidamente, facilitando la modificación global y reduciendo la repetición del código.

CSS

/*Malas prácticas*/
.header{
    font-family: 'Arial', sans-serif;
    font-size: 18px;
    color: #333;
}

/*Buenas prácticas*/
:root{
    --font-family: 'Arial', sans-serif;
    --font-size: 18px;
    --text-color: #333;
}

.header{
    font-family: var(--font-family);
    font-size: var(--font-size);
    color: var(--text-color);
}

9.Modularidad y Componentes: 

    Divide estilos en componentes modulares para mejorar la reutilización y el mantenimiento.

CSS

/*Malas prácticas*/
.buttom{
    background: #3498db;
    color: #fff;
    padding: 10px 20px;
    border-radius: 5px;
}

/*Buenas prácticas*/
.buttom{
    /*Estilos básicos*/
    background: var(--primary-color);
    color: #fff;
    padding: 10px 20px;
    border-radius: 5px;
}

primary-buttom{
    /*Modificación para botón primario*/
    border: 2px solid var(--primary-color);
    background: transparent;
}

10.Evitar !important en Variables:

    No uses !important en variables a menos que sea absolutamente necesario para evitar problemas de sobreescritura

CSS

/*Malas prácticas*/
:root{
    --background: #f0f0f0 !important;
}

/*Buenas prácticas*/
:root{
    --background: #f0f0f0;
}

11.Ordenar Propiedades Alfabéticamente:

    Mantén las propiedades ordenadas alfabeticamente para facilitar la lectura y encontrar rápidamente lo que estás buscando.

CSS

/*Malas prácticas*/
.container{
    margin: 10px;
    background: #fff;
    width: 80%;
    padding: 20px;
    color: #333;
}

/*Buenas prácticas*/
.container{
    background: #fff;
    color: #333;
    margin: 10px;
    padding: 20px;
    width: 80%;
}

12.Uso de Flexbox y Grid para Diseño:

    Utiliza Flexbox y Grid para crear diseños más flexibles y eficientes.

CSS

/*Malas prácticas*/
.container{
    float: left;
    width: 50%;
}

/*Buenas prácticas*/
.container{
    display: flex;
    justify-content: space-between;
}

Estas practicas adicionales, junto con el uso de variables, contribuyen a un código CSS más limpio, modular y facil de mantener.

